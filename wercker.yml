box: hseeberger/scala-sbt
build:
  steps:
    - script:
        name: compile
        code: |
          sbt clean compile test

scaladoc:
  steps:
    - script:
        name: Generate Scaladoc
        code: |
          sbt clean compile doc
    - script:
        name: Move Scaladoc
        code: |
          echo "================="
          sbt 'inspect version'
          echo "================="
          export PROJECT_VERSION_TMP=$(sbt 'inspect version' | grep Setting | awk '{print $NF}')
          echo "1 /${PROJECT_VERSION_TMP}/"
          echo "================="
          export PROJECT_VERSION="${PROJECT_VERSION_TMP: :-1}"
          echo "2 /${PROJECT_VERSION}/"
          echo "================="
          echo "3 /${PROJECT_VERSION_TMP: :-2}/"
          echo "================="
          export ROOT_API="/pipeline/source/target/scala-2.11/api"
          export ROOT_TMP="/pipeline/source/tmp"
          echo "mkdir -p ${ROOT_TMP}/docs/${PROJECT_VERSION}/api"
          mkdir -p ${ROOT_TMP}/docs/${PROJECT_VERSION}/api
          mv ${ROOT_API}/* ${ROOT_TMP}/docs/${PROJECT_VERSION}/api/
          echo "================="
          ls -R ${ROOT_TMP}/
          echo "================="
    - script:
        name: Configure Git
        code: |-
          # git config --global push.default matching
          git config --global push.default simple
          git config --global user.email "$GITHUB_EMAIL"
          git config --global user.name "$GITHUB_USERNAME"
    - script:
        # https://srackham.wordpress.com/2014/12/14/publishing-a-project-website-to-github-pages/
        # https://help.github.com/articles/creating-pages-with-the-automatic-generator/
        # https://help.github.com/articles/creating-project-pages-manually/
        # https://vaadin.com/blog/-/blogs/host-your-javadoc-s-online-in-github
        # http://little418.com/2015/04/directory-listings-on-github-pages.html
        name: Publish Scaladoc
        code: |
          export ROOT_GIT="/pipeline/source/git_tmp"
          mkdir -p ${ROOT_GIT}
          cd ${ROOT_GIT}
          git clone --branch gh-pages https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/logimethods/nats-connector-gatling.git gh-pages
          cd gh-pages
          cp -r ${ROOT_TMP}/* .
          ls docs
          ls docs | perl -e 'print "<html><body><ul>"; \\
            print "Last edited the $(date +'%Y-%m-%d at %H:%M:%S')<br>" \\
            while(<>) { chop $_; print "<li><a href=\"./docs/$_/api\">$_</a></li>";} \\
            print "</ul></body></html>"' > index.html
          git add --all        
          git commit -a -m "Wercker Run Id: '${WERCKER_RUN_ID}', Project Version: ${PROJECT_VERSION}"
          git push origin gh-pages
          
scaladocX:
  steps:
    - script:
        # https://vaadin.com/blog/-/blogs/host-your-javadoc-s-online-in-github
        name: Publish Scaladoc
        code: |
          echo "> env"
          env
          
          echo "> cd ${ROOT_API}/"
          cd ${ROOT_API}/
          ls -als ${ROOT_API}/
          
          echo "> git init"
          git init          
          ls -alsR ${ROOT_API}/
          
          echo "> git remote add javadoc https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/logimethods/nats-connector-gatling.git"
          git remote add javadoc https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/logimethods/nats-connector-gatling.git
          ls -alsR ${ROOT_API}/
          
          echo "> git fetch --depth=1 javadoc gh-pages"
          git fetch --depth=1 javadoc gh-pages
          ls -alsR ${ROOT_API}/
          
          echo "> cp -r ${ROOT_TMP}/* ${ROOT_API}/"
          cp -r ${ROOT_TMP}/* ${ROOT_API}/
          ls ${ROOT_API}/docs
          
          echo "> git add --all"
          git add --all        
          ls ${ROOT_API}/docs
          
          echo "> git commit -m ...${WERCKER_BUILD_ID}"
          git commit -m "Wercker Build Id: ${WERCKER_BUILD_ID}"
          ls ${ROOT_API}/docs
          
          echo "> git merge --no-edit -s ours remotes/javadoc/gh-pages"
          git merge --no-edit -s ours remotes/javadoc/gh-pages
          ls ${ROOT_API}/docs
          
          echo "> git push javadoc master:gh-pages"
          git push javadoc master:gh-pages
          ls ${ROOT_API}/docs
          
deploy:
  steps:
    - script:
        name: deploy
        code: |
          echo "${SONATYPE_PGP_SECRING_64}" | base64 -d > /pipeline/source/secring.asc
          echo "${SONATYPE_PGP_PUBRING_64}" | base64 -d > /pipeline/source/pubring.asc
          ### sbt clean compile publishSigned
          # sonatypeRelease

deploy-snapshot:
  steps:
    - script:
        name: deploy-snapshot
        code: |
          sbt clean compile publish
