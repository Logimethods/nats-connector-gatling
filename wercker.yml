box: hseeberger/scala-sbt
build:
  steps:
    - script:
        name: compile
        code: |
          sbt clean compile test

scaladoc:
  steps:
    - script:
        name: Generate Scaladoc
        code: |
          sbt clean compile doc
    - script:
        name: Move Scaladoc
        code: |
          echo "================="
          export VER=$(sbt 'inspect version' | grep Setting | awk '{print $NF}')
          echo $VER
          echo "================="
          export PROJECT_VERSION="${WERCKER_STEP_ID}"
          export ROOT_API="/pipeline/source/target/scala-2.11/api"
          export ROOT_TMP="/pipeline/source/tmp"
          mkdir -p ${ROOT_TMP}/docs/${PROJECT_VERSION}/api
          mv ${ROOT_API}/* ${ROOT_TMP}/docs/${PROJECT_VERSION}/api/
          ls -R /pipeline/source/target/scala-2.11/
    - script:
        name: Configure Git
        code: |-
          # git config --global push.default matching
          git config --global push.default simple
          git config --global user.email "$GITHUB_EMAIL"
          git config --global user.name "$GITHUB_USERNAME"
          # https://help.github.com/articles/error-permission-denied-publickey/#platform-all
          # ssh -vT git@github.com
    - script:
        # https://vaadin.com/blog/-/blogs/host-your-javadoc-s-online-in-github
        name: Publish Scaladoc
        code: |
          echo "> env"
          env
          
          echo "> cd ${ROOT_API}/"
          cd ${ROOT_API}/
          ls -als ${ROOT_API}/
          
          echo "> git init"
          git init          
          ls -alsR ${ROOT_API}/
          
          echo "> git remote add javadoc https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/logimethods/nats-connector-gatling.git"
          git remote add javadoc https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/logimethods/nats-connector-gatling.git
          ls -alsR ${ROOT_API}/
          
          echo "> git fetch --depth=1 javadoc gh-pages"
          git fetch --depth=1 javadoc gh-pages
          ls -alsR ${ROOT_API}/
          
          echo "> cp -r ${ROOT_TMP}/* ${ROOT_API}/"
          cp -r ${ROOT_TMP}/* ${ROOT_API}/
          ls ${ROOT_API}/docs
          
          echo "> git add --all"
          git add --all        
          ls ${ROOT_API}/docs
          
          echo "> git commit -m ...${WERCKER_BUILD_ID}"
          git commit -m "Wercker Build Id: ${WERCKER_BUILD_ID}"
          ls ${ROOT_API}/docs
          
          echo "> git merge --no-edit -s ours remotes/javadoc/gh-pages"
          git merge --no-edit -s ours remotes/javadoc/gh-pages
          ls ${ROOT_API}/docs
          
          echo "> git push javadoc master:gh-pages"
          git push javadoc master:gh-pages
          ls ${ROOT_API}/docs
          
deploy:
  steps:
    - script:
        name: deploy
        code: |
          echo "${SONATYPE_PGP_SECRING_64}" | base64 -d > /pipeline/source/secring.asc
          echo "${SONATYPE_PGP_PUBRING_64}" | base64 -d > /pipeline/source/pubring.asc
          ### sbt clean compile publishSigned
          # sonatypeRelease

deploy-snapshot:
  steps:
    - script:
        name: deploy-snapshot
        code: |
          sbt clean compile publish
